# collect source files
file(GLOB_RECURSE src ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)

message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "CMAKE_HOST_SYSTEM_NAME: ${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "CMAKE_OSX_ARCHITECTURES: ${CMAKE_OSX_ARCHITECTURES}")
message(STATUS "MSVC: ${MSVC}")
message(STATUS "CMAKE_SIZEOF_VOID_P: ${CMAKE_SIZEOF_VOID_P}")

set(__ARCHITECTURES ${CMAKE_SYSTEM_PROCESSOR})
if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
    if(CMAKE_OSX_ARCHITECTURES)
        set(__ARCHITECTURES ${CMAKE_OSX_ARCHITECTURES})
    endif()
endif()
if(__ARCHITECTURES STREQUAL "arm;arm64")
    set(IS_ARM TRUE)
    set(IS_ARMV7 TRUE)
    set(IS_ARM64 TRUE)
elseif(__ARCHITECTURES STREQUAL "i386;x86_64")
    set(IS_X86 TRUE)
    set(IS_X64 TRUE)
elseif(__ARCHITECTURES MATCHES "(aarch64|arm64)")
    set(IS_ARM TRUE)
    set(IS_ARM64 TRUE)
elseif(__ARCHITECTURES MATCHES "arm.*")
    set(IS_ARM TRUE)
    set(IS_ARMV7 TRUE)
elseif(__ARCHITECTURES MATCHES "i[3456]86")
    set(IS_X86 TRUE)
elseif(__ARCHITECTURES MATCHES "(x86_64|AMD64)")
    if(CMAKE_SIZEOF_VOID_P STREQUAL 4)
        set(IS_X86 TRUE)
    else()
        set(IS_X86 TRUE)
        set(IS_X64 TRUE)
    endif()
endif()

#set(ASM_X86_64_SRC)
if(NOT MSVC)
    message(STATUS "NOT MSVC")
    if(IS_X64)
        message(STATUS "IS_X64")
        list(APPEND ASM_X86_64_SRC cpuid_x86_64.S)
    else()
        message(STATUS "IS_X86")
        list(APPEND ASM_X86_64_SRC cpuid_x86_32.S)
    endif()
    message(STATUS "ASM_X86_64_SRC: ${ASM_X86_64_SRC}")
    add_library(asm_lib ${ASM_X86_64_SRC})
endif()

get_filename_component(directory_name ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
# build each source file independently
foreach(source ${src})
    get_filename_component(filename ${source} NAME_WE)
    set(executable_name ${directory_name}_${filename})
    add_executable(${executable_name} ${source})
    target_link_libraries(${executable_name} ${PROJECT_LINK_LIBS} ${Boost_LINKER_LIBS} asm_lib)
    set_target_properties(${executable_name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${directory_name})
    set_target_properties(${executable_name} PROPERTIES INSTALL_RPATH_USE_LINK_PATH TRUE)
    install(TARGETS ${executable_name} DESTINATION ${PROJECT_BINARY_DIR}/install/bin)
endforeach(source)
